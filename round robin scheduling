GChart = []  # Gaint Chart
RRAvgWaitingTime = 0
RRAvgTurnAroundTime = 0


class process:
    def __init__(self, PId, AT, BT):
        self.PId = PId  # process id
        self.arrival = AT  # arrival time
        self.burst = BT  # burst time


def shiftCL(alist):  # circular shift left fn: to rearrange queue
    temp = alist[0]
    for i in range(len(alist)-1):
        alist[i] = alist[i+1]
    alist[len(alist)-1] = temp
    return alist


def RR(TQ, PList, n):  # time quantum, processes list, number of processes
    global GChart
    global RRAvgWaitingTime
    global RRAvgTurnAroundTime
    queue = []  # waiting queue
    CTList = []  # complition time
    TotalCT = 0
    ATList = []  # arrival time
    TotalAT = 0
    BTList = []  # burst time
    TotalBT = 0
    time = 0  # current time
    AP = 0  # arrived processes
    RP = 0  # ready processes
    DP = 0  # done processes
    q = TQ  # time quantum
    start = 0

    # lists of AT and BT
    a = 0
    while a < n:
        ATList.append(PList[a].arrival)
        BTList.append(PList[a].burst)

        a += 1

    while(DP < n):
        for i in range (AP, n):
            if (time>= PList[i].arrival):
                queue.append(PList[i])
                AP+=1
                RP+=1
# if no process come or alla processes finished
        if (RP < 1):
            GChart.append(0)
            time += 1
            continue
        # shift
        if (start):  # if first quantum time is done
            queue = shiftCL(queue)

        if (queue[0].burst > 0):
            if (queue[0].burst > q):
                for g in range(time, time+q):
                    GChart.append(queue[0].PId)
                time += q
                queue[0].burst -= q
            else:  # if process burst <= quantum
                for g in range(time, time+queue[0].burst):
                    GChart.append(queue[0].PId)
                time += queue[0].burst
                CTList.append(time)  # add to complition time list
                queue[0].burst = 0
                DP += 1
                RP -= 1
            start = 1

    o = 0
    while o<n:
        TotalCT += CTList[o]
        TotalAT += ATList[o]
        TotalBT += BTList[o]

        o += 1

    RRAvgWaitingTime = (TotalCT - TotalAT - TotalBT) / n
    RRAvgTurnAroundTime = (TotalCT - TotalAT) / n
    # print(ATList)
    # print(BTList)
    # print(CTList)


# test
def main():
    plist = []
    plist.append(process(0, 0, 7))
    plist.append(process(1, 2, 4))
    plist.append(process(2, 4, 1))
    RR(3, plist, len(plist))
    print(GChart)
    print(RRAvgWaitingTime)
    print(RRAvgTurnAroundTime)


if __name__ == '__main__': main()
